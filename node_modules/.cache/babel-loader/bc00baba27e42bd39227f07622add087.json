{"ast":null,"code":"var _jsxFileName = \"/media/lucas/Code/Code/JavaScript/ReactJs/Projects/bulario/src/components/WebsiteRoutes/FileReader.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { PDFJS } from \"pdfjs-dist\";\nimport \"../WebsiteRoutes/components/styles/bula.css\";\nimport Highlighter from \"react-highlight-words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ReadFile() {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [dataArr, setDataArr] = useState([]);\n  const [font, setFont] = useState(14);\n  const [upload, setUpload] = useState(false);\n  const [searchedWord, setSearchedWord] = useState(\"\");\n  var textRead = \"\";\n\n  function ExtractText(e) {\n    var file_Reader = new FileReader();\n    file_Reader.readAsDataURL(e.target.files[0]);\n\n    file_Reader.onloadend = function (event) {\n      convertURIToBinary(event.target.result);\n    };\n\n    setUpload(true);\n  }\n\n  var BASE64_MARKER = \";base64,\";\n\n  function convertURIToBinary(dataURI) {\n    var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\n    var base64 = dataURI.substring(base64Index);\n    var raw = window.atob(base64);\n    var rawLength = raw.length;\n    var array = new Uint8Array(new ArrayBuffer(rawLength));\n\n    for (var i = 0; i < rawLength; i++) {\n      array[i] = raw.charCodeAt(i);\n    }\n\n    pdfAsArray(array);\n  }\n\n  function getPageText(pageNum, PDFDocumentInstance) {\n    return new Promise(function (resolve, reject) {\n      PDFDocumentInstance.getPage(pageNum).then(function (pdfPage) {\n        pdfPage.getTextContent().then(function (textContent) {\n          var textItems = textContent.items;\n          var finalString = \"\";\n\n          for (var i = 0; i < textItems.length; i++) {\n            var item = textItems[i];\n            finalString += item.str + \" \";\n          }\n\n          resolve(finalString);\n        });\n      });\n    });\n  }\n\n  function pdfAsArray(pdfAsArray) {\n    PDFJS.getDocument(pdfAsArray).then(function (pdf) {\n      var pdfDocument = pdf;\n      var pagesPromises = [];\n\n      for (var i = 0; i < pdf.pdfInfo.numPages; i++) {\n        (function (pageNumber) {\n          pagesPromises.push(getPageText(pageNumber, pdfDocument));\n        })(i + 1);\n      }\n\n      Promise.all(pagesPromises).then(function (pagesText) {\n        setDataArr(pagesText);\n\n        for (var pageNum = 0; pageNum < pagesText.length; pageNum++) {\n          setText(pagesText[pageNum]);\n        }\n      });\n    }, function (reason) {\n      // PDF loading error\n      console.error(reason);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-id\",\n      className: upload ? \"display-none\" : \"upload-input\",\n      name: \"file_name\",\n      onChange: e => ExtractText(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchedWord,\n          onChange: e => setSearchedWord(e.target.value),\n          className: upload ? 'searchforsomething' : \"display-none\",\n          placeholder: \"Pesquisar uma informa\\xE7\\xE3o \\uD83D\\uDD0E\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"abbr\", {\n        title: font,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          className: upload ? 'range-input' : \"display-none\",\n          min: 14,\n          defaultValue: 20,\n          max: 40,\n          onChange: e => setFont(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: upload ? \"bulario\" : \"display-none\",\n        children: dataArr.length <= 0 ? null : dataArr.map(page => {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: `${font}px`,\n              width: \"80%\"\n            },\n            className: \"bula-textarea\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"bula-paragraph\",\n              children: [textRead += page, /*#__PURE__*/_jsxDEV(Highlighter, {\n                highlightClassName: \"HighlightedWords\",\n                searchWords: [`${searchedWord}`],\n                textToHighlight: page\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)]\n          }, page.length, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ReadFile, \"jDF6pYv+UDvgPQnVBXqBOpkmmMY=\");\n\n_c = ReadFile;\n;\nexport default ReadFile;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadFile\");","map":{"version":3,"sources":["/media/lucas/Code/Code/JavaScript/ReactJs/Projects/bulario/src/components/WebsiteRoutes/FileReader.jsx"],"names":["React","useState","PDFJS","Highlighter","ReadFile","text","setText","dataArr","setDataArr","font","setFont","upload","setUpload","searchedWord","setSearchedWord","textRead","ExtractText","e","file_Reader","FileReader","readAsDataURL","target","files","onloadend","event","convertURIToBinary","result","BASE64_MARKER","dataURI","base64Index","indexOf","length","base64","substring","raw","window","atob","rawLength","array","Uint8Array","ArrayBuffer","i","charCodeAt","pdfAsArray","getPageText","pageNum","PDFDocumentInstance","Promise","resolve","reject","getPage","then","pdfPage","getTextContent","textContent","textItems","items","finalString","item","str","getDocument","pdf","pdfDocument","pagesPromises","pdfInfo","numPages","pageNumber","push","all","pagesText","reason","console","error","value","map","page","fontSize","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {PDFJS} from \"pdfjs-dist\"\nimport \"../WebsiteRoutes/components/styles/bula.css\"\nimport Highlighter from \"react-highlight-words\";\n\n\nfunction ReadFile() {\n\n  const [text, setText] = useState(\"\")\n  const [dataArr, setDataArr] = useState([])\n  const [font, setFont] = useState(14)\n  const [upload, setUpload] = useState(false)\n  const [searchedWord, setSearchedWord] = useState(\"\")\n  var textRead = \"\"\n\n  function ExtractText(e){\n    var file_Reader = new FileReader()\n    file_Reader.readAsDataURL(e.target.files[0])\n    file_Reader.onloadend = function(event){\n      convertURIToBinary(event.target.result)\n    }\n    setUpload(true)\n\n  }\n\n  var BASE64_MARKER = \";base64,\"\n\n  function convertURIToBinary(dataURI){\n    var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;\n    var base64 = dataURI.substring(base64Index);\n    var raw = window.atob(base64);\n    var rawLength = raw.length;\n    var array = new Uint8Array(new ArrayBuffer(rawLength));\n\n    for (var i = 0; i < rawLength; i++) {\n        array[i] = raw.charCodeAt(i);\n    }\n    pdfAsArray(array)\n  }\n\n  function getPageText(pageNum, PDFDocumentInstance) {\n    return new Promise(function (resolve, reject) {\n      PDFDocumentInstance.getPage(pageNum).then(function (pdfPage) {\n        pdfPage.getTextContent().then(function (textContent) {\n          var textItems = textContent.items;\n          var finalString = \"\";\n\n          for (var i = 0; i < textItems.length; i++) {\n            var item = textItems[i];\n\n            finalString += item.str + \" \";\n        }\n\n        resolve(finalString);\n    });\n      });\n  });\n        }\n\n  function pdfAsArray(pdfAsArray){\n    PDFJS.getDocument(pdfAsArray).then(function (pdf) {\n    var pdfDocument = pdf;\n    var pagesPromises = [];\n\n    for (var i = 0; i < pdf.pdfInfo.numPages; i++) {\n      (function (pageNumber) {\n          pagesPromises.push(getPageText(pageNumber, pdfDocument));\n      })(i + 1);\n  }\n\n    Promise.all(pagesPromises).then(function (pagesText) {\n\n    setDataArr(pagesText)\n    for (var pageNum = 0; pageNum < pagesText.length; pageNum++) {\n        setText(pagesText[pageNum]);\n    }\n  });\n\n    }, function (reason) {\n        // PDF loading error\n        console.error(reason);\n    });\n  }\n  \n  \n\n  return (\n    <React.Fragment>    \n      \n      <br></br>\n      \n      <input type=\"file\" id=\"file-id\" className={upload?\"display-none\":\"upload-input\"} name=\"file_name\" onChange={(e)=>ExtractText(e)}>\n      </input>\n\n      <br />\n      <div className=\"output\">\n\n      <span>\n        <br /><br /><br />        \n        <input type=\"text\" value={searchedWord} onChange={(e)=>setSearchedWord(e.target.value)} className={upload?'searchforsomething':\"display-none\"} placeholder=\"Pesquisar uma informação &#x1F50E;&#xFE0F;\" />\n        \n      </span>\n\n      <abbr title={font}><input type=\"range\" className={upload?'range-input':\"display-none\"} min={14} defaultValue={20} max={40} onChange={(e)=>setFont(e.target.value)} /></abbr>\n\n      <div className={upload?\"bulario\":\"display-none\"}>\n        {dataArr.length<=0?null:dataArr.map((page)=>{\n          return(\n          <span key={page.length} style={{fontSize:`${font}px`, width:\"80%\"}} className='bula-textarea'>\n              <p className='bula-paragraph'>\n                {textRead += page}\n                <Highlighter\n                  highlightClassName=\"HighlightedWords\"\n                  searchWords={[`${searchedWord}`]}\n                  textToHighlight={page}\n                />\n              </p>\n              <br/>\n            </span>\n          )\n        })}\n      </div>\n      <br />\n      <br />\n      </div>\n\n    </React.Fragment>\n  );\n};\n\n\nexport default ReadFile"]},"metadata":{},"sourceType":"module"}